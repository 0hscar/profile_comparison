import os

# For real LLM integration, you could use openai or another provider.
# For now, this is mocked for MVP/demo purposes.

def generate_comparison_suggestions(business_profile, competitors_profiles):
    """
    Given a business profile and a list of competitor profiles,
    return a summary and actionable suggestions as if generated by an LLM.
    """
    # Extract some basic stats for demonstration
    user_reviews = business_profile.get("review_count", 0)
    user_rating = business_profile.get("average_rating", 0)
    user_photos = business_profile.get("photo_count", 0)
    user_fields = business_profile.get("fields_present", [])

    avg_reviews = int(sum(c.get("review_count", 0) for c in competitors_profiles) / max(len(competitors_profiles), 1))
    avg_rating = round(sum(c.get("average_rating", 0) for c in competitors_profiles) / max(len(competitors_profiles), 1), 2)
    avg_photos = int(sum(c.get("photo_count", 0) for c in competitors_profiles) / max(len(competitors_profiles), 1))

    # Determine missing fields
    critical_fields = {"hours", "description", "menu_link", "address", "phone"}
    missing_fields = critical_fields - set(user_fields)

    # Compose a mock "AI" response
    summary = (
        f"Your business has {user_reviews} reviews (avg rating: {user_rating}). "
        f"Competitors average {avg_reviews} reviews (avg rating: {avg_rating}).\n"
        f"You have {user_photos} photos; competitors average {avg_photos}."
    )

    suggestions = []
    if user_photos < avg_photos:
        suggestions.append(f"Add more photos. Competitors average {avg_photos}, you have {user_photos}.")
    if user_reviews < avg_reviews:
        suggestions.append(f"Encourage more reviews. Competitors average {avg_reviews}, you have {user_reviews}.")
    if missing_fields:
        suggestions.append(f"You're missing these important fields: {', '.join(missing_fields)}.")
    if user_rating < avg_rating:
        suggestions.append("Consider ways to improve your average rating, such as responding to reviews or improving service.")

    # Mock: If no suggestions, say you're doing great!
    if not suggestions:
        suggestions.append("Your profile is as complete or better than your competitors. Great job!")

    return {
        "summary": summary,
        "suggestions": suggestions
    }
